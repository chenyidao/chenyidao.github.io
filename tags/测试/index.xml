<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>测试 on 合山雷公马</title><link>https://chenyidao.github.io/tags/%E6%B5%8B%E8%AF%95/</link><description>Recent content in 测试 on 合山雷公马</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 17 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://chenyidao.github.io/tags/%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml"/><item><title>调试</title><link>https://chenyidao.github.io/p/%E8%B0%83%E8%AF%95/</link><pubDate>Wed, 17 Aug 2022 00:00:00 +0000</pubDate><guid>https://chenyidao.github.io/p/%E8%B0%83%E8%AF%95/</guid><description>&lt;h2 id="代码调试概述">代码调试概述&lt;/h2>
&lt;h3 id="前言">前言&lt;/h3>
&lt;p>​ 有时候我们写出来的代码与预期处理结果不符，或者可能潜在一些bug，需要我们去修复；那么如何复现并快速定位到问题成为了关键，由于篇幅有限，本篇主要讨论问题复现（即debug），问题定位下一次再相互学习和讨论。&lt;/p>
&lt;p>​ 一般而言，我们开发流程是，在本地Window系统上开发完代码，然后将代码放在linux机器上跑。假如这时候我们要通过一个UT在本地调测一下我们写的函数表现是否符合预期。这个时候远程调试就发挥作用了。&lt;/p>
&lt;h3 id="本篇文章涉及范围">本篇文章涉及范围&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>远程调试&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>​ Java代码调试&lt;/p>
&lt;p>​ Scala代码调试&lt;/p>
&lt;p>​ c++代码调试&lt;/p>
&lt;h2 id="java代码远程调试">Java代码远程调试&lt;/h2>
&lt;h3 id="idea-调试java-ut">IDEA 调试Java UT&lt;/h3>
&lt;h4 id="调试某个用例比如-xxxtestjava测试类">调试某个用例（比如 xxxTest.java测试类）&lt;/h4>
&lt;p>引用插件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.maven.plugins&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>maven-surefire-plugin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>2.19.1&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--&amp;gt;这里面有很多配置，自行上网查询&amp;lt;--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--&amp;gt;包含测试用例includes&amp;lt;--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--&amp;gt;排除测试用例excludes&amp;lt;--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--&amp;gt;生成测试报告等&amp;lt;--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>动态指定测试用例&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 只跑xxxTest.java这个类的用例&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mvn &lt;span class="nb">test&lt;/span> -Dtest&lt;span class="o">=&lt;/span>xxxTest.java
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 只跑xxxTest.java这个类中的myTest用例方法&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mvn &lt;span class="nb">test&lt;/span> -Dtest&lt;span class="o">=&lt;/span>xxxTest.java#myTest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="远程调试某个用例">远程调试某个用例&lt;/h4>
&lt;p>参考：https://www.jianshu.com/p/302dc10217c0&lt;/p>
&lt;p>1、IDEA 设置（借用别人一个图）&lt;/p>
&lt;p>​ &lt;img src="https://img-blog.csdnimg.cn/b48e1b0866bb4eeb96b36469a7ab2640.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5ouJ6aOO55qE6JyX54mb,size_14,color_FFFFFF,t_70,g_se,x_16"
loading="lazy"
alt="在这里插入图片描述"
>&lt;/p>
&lt;p>2、linux 服务器上执行调试命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 跑xxxTest.java这个类的用例&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mvn -Dmaven.surefire.debug&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8088 -Xnoagent -Djava.compiler=NONE&amp;#34;&lt;/span> &lt;span class="nb">test&lt;/span> -Dtest&lt;span class="o">=&lt;/span>xxxTest.java
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>3、在本地IDEA上打好断点，点击调试按钮，然后就可以进行调试啦~&lt;/p>
&lt;p>&lt;strong>注意点：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>IDEA选择要调试的模块代码要与远程服务器上的代码一致&lt;/li>
&lt;li>IDEA上填的端口号要与远程调试命令中的一致&lt;/li>
&lt;/ul>
&lt;h3 id="idea-调试scala-ut">IDEA 调试scala UT&lt;/h3>
&lt;p>参考地址：https://www.cnblogs.com/doit8791/p/5766239.html&lt;/p>
&lt;p>1、IDEA设置远程调试&lt;/p>
&lt;p>方式一：插件参数方式设置&lt;/p>
&lt;p>&lt;code>&amp;lt;debugForkedProcess&amp;gt;true&amp;lt;/debugForkedProcess&amp;gt;&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.scalatest&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>scalatest-maven-plugin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;testFailureIgnore&amp;gt;&lt;/span>true&lt;span class="nt">&amp;lt;/testFailureIgnore&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;debugForkedProcess&amp;gt;&lt;/span>true&lt;span class="nt">&amp;lt;/debugForkedProcess&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>2、执行mvn test 命令&lt;/p>
&lt;p>IDEA 中在要调测的用例上打好断点，服务器上执行 mvn test 命令。&lt;/p>
&lt;h3 id="远程通过java或者scala调用到-c代码">远程通过JAVA或者Scala调用到 C++代码&lt;/h3>
&lt;p>1、IDEA 上远程调试挂上java 或 scala，走到调用C++代码之前的断点处&lt;/p>
&lt;p>2、Clion 打开C++项目，Run -&amp;gt; Attach to Process，挂上正在运行的java或scala进程&lt;/p>
&lt;p>可通过 jps查看（都是java进程），scala ut 显示进程名称是 ScalaTestRunner&lt;/p>
&lt;p>3、IDEA 上往下走&lt;/p>
&lt;p>4、走到C++侧时，点击Clion的左下角 Debugger -&amp;gt; GDB，然后在其中输入命令，然后按F9&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">handle SIGSEGV noprint pass
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>5、在C++侧要调测的代码位置打好断点，放开IDEA 侧断点，按F9，即可走到C++断点处。&lt;/p>
&lt;p>&lt;strong>注意：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>在过程中如果有多个线程，可以在运行到某个线程时，在Debugger -&amp;gt; GDB中输入 set scheduler-locking on 锁住该线程，然后调试该线程的执行过程。&lt;/li>
&lt;/ul></description></item></channel></rss>