[{"content":"hugo + github + action 搭建个人博客 **hugo学习视频：**https://www.bilibili.com/video/BV1m4411c7ia?spm_id_from=333.999.0.0\u0026vd_source=0670356e66e3b9c0d3c65e1ece1cfcab\n工具准备 Node.js (Node.js 版本需不低于 8.6，建议使用 10.0 及以上版本)\nGit\n安装hugo 参考：https://blog.csdn.net/weixin_32667433/article/details/119283924\n基于hugo搭建博客网站 验证 打开cmd窗口，输入hugo help看是否安装成功，以下输出证明安装成功了。\n创建一个博客项目 使用命令创建一个新的站点 执行命令\n1 hugo new site island.org \u0026amp;\u0026amp; cd island.org 创建出来的目录结构：\n1 2 3 4 5 6 7 8 9 . ├── archetypes │ └── default.md ├── config.toml # 配置文件入口 ├── content # Markdown 文件存放入口 ├── data ├── layouts # 网站页面结构管理入口 ├── static # 网站静态资源存放入口 └── themes # 网站主题皮肤入口\t应用主题 搜索主题 在github上关键字搜索 hugo-theme，找star多的下载下来\n下载主题 方式 1：直接下载zip包解压放在themes目录下（推荐）\n方式2：clone 的方式下载到themes目录下\n1 2 3 cd cyd.org git init git clone https://github.com/budparr/gohugo-theme-ananke.git themes/ananke 配置主题 将主题中exampleSite下的所有内容复制并替换到根目录下\n启动 1 hugo server 查看效果 http://localhost:1313\n总结 至此，本地网站创建起来了，但我们需要将网站部署到云端。\naction 自动化部署 github 生成Personal access tokens https://www.jianshu.com/p/d0d0e29caed1\n部署 创建一个私有仓库，用来存放源码，比如hugo-blog。\n创建一个名称为：用户名.github.io的仓库，用来存放hugo生成的静态网页代码\n生成personal access token（Action 需要有操作你的仓库的权限）\n点击头像 -\u0026gt; Settings -\u0026gt; Developer settings -\u0026gt; Personal access tokens -\u0026gt; Generate new token，\n只需要授予repo权限即可，记住这串TOKEN，网页关闭后就无法查看了。\n依次点击Setting-\u0026gt;Secrets-\u0026gt;Actions-\u0026gt;New repository secrets，Name填ACCESS_TOKEN ,Value填刚刚获取的TOKEN\n上传博客源码到源码存放仓库\n对源码仓配置 github actions\n官方配置指导文档：https://gohugo.io/hosting-and-deployment/hosting-on-github/\n在根目录下创建配置文件 .github/workflows/gh-pages.yml，并配置action内容（/表示一层目录）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 name: github pages # 名字自取 on: push: branches: - main # 这里的意思是当 main分支发生push的时候，运行下面的jobs，这里先改为github-actions jobs: deploy: # 任务名自取 runs-on: ubuntu-20.04\t# 在什么环境运行任务 steps: - uses: actions/checkout@v2\t# 引用actions/checkout这个action，与所在的github仓库同名 - name: Setup Hugo\t# 步骤名自取 uses: peaceiris/actions-hugo@v2\t# hugo官方提供的action，用于在任务环境中获取hugo with: hugo-version: \u0026#39;latest\u0026#39;\t# 获取最新版本的hugo # extended: true - name: Build run: hugo --minify\t# 使用hugo构建静态网页 - name: Deploy uses: peaceiris/actions-gh-pages@v3\t# 一个自动发布github pages的action with: external_repository: 用户名/用户名.github.io\t# 发布到哪个repo personal_token: 填写上面步骤中创建的personal access token # 发布到其他repo需要提供上面生成的personal access token publish_dir: ./public\t# 注意这里指的是要发布哪个文件夹的内容，而不是指发布到目的仓库的什么位置，因为hugo默认生成静态网页到public文件夹，所以这里发布public文件夹里的内容 publish_branch: main\t# 发布到哪个branch 如果有 submodule,上面的需要加上几行，如下\n1 2 3 4 5 6 - name: Check out repository code uses: actions/checkout@v2 with: submodules: recursive # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo 配置完成后将配置文件上传到源码仓\n点击上侧一排的【actions】按钮，点击左侧的【deploy】，点右侧的【Run workflow ▽】切换到main分支，选择绿色的【Run workflow】 按钮 ，此时将成功部署。\nFQA Q：Error: Action failed with \u0026ldquo;The process \u0026lsquo;/usr/bin/git\u0026rsquo; failed with exit code 128\u0026rdquo;\nA：https://blog.saky.site/post/github-action-128/\n将源码仓库设置为私有\n重新生成personal access token\n回到通过生成的personal access token生成Secrets，Name填ACCESS_TOKEN ,Value填刚刚获取的TOKEN\n更新yaml中personal_token的值\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 name: github pages # 名字自取 on: push: branches: - main # 这里的意思是当 main分支发生push的时候，运行下面的jobs，这里先改为github-actions jobs: deploy: # 任务名自取 runs-on: ubuntu-20.04\t# 在什么环境运行任务 steps: - uses: actions/checkout@v2\t# 引用actions/checkout这个action，与所在的github仓库同名 - name: Setup Hugo\t# 步骤名自取 uses: peaceiris/actions-hugo@v2\t# hugo官方提供的action，用于在任务环境中获取hugo with: hugo-version: \u0026#39;latest\u0026#39;\t# 获取最新版本的hugo # extended: true - name: Build run: hugo --minify\t# 使用hugo构建静态网页 - name: Deploy uses: peaceiris/actions-gh-pages@v3\t# 一个自动发布github pages的action with: external_repository: chenyidao/chenyidao.github.io\t# 发布到哪个repo personal_token: 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\t# 发布到其他repo需要提供上面生成的personal access token publish_dir: ./public\t# 注意这里指的是要发布哪个文件夹的内容，而不是指发布到目的仓库的什么位置，因为hugo默认生成静态网页到public文件夹，所以这里发布public文件夹里的内容 publish_branch: main\t# 发布到哪个branch 参考 https://blog.csdn.net/u013164931/article/details/125648653\nhttps://gohugo.io/hosting-and-deployment/hosting-on-github/\n手动部署 编译静态页面文件 编译命令\n1 hugo -D 生成好的静态页面文件将放在项目的 public 目录中，目录结构如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ├── 404.html ├── categories │ ├── index.html │ └── index.xml ├── dist │ ├── css │ │ └── app.1cb140d8ba31d5b2f1114537dd04802a.css │ └── js │ └── app.3fc0f988d21662902933.js ├── images │ └── gohugo-default-sample-hero-image.jpg ├── index.html ├── index.xml ├── posts │ ├── index.html │ ├── index.xml │ ├── my-first-post │ │ └── index.html │ └── page │ └── 1 │ └── index.html ├── sitemap.xml └── tags ├── index.html └── index.xml 使用 github 托管（推荐） 官方文档：https://www.gohugo.org/\n具体参考：https://www.jianshu.com/p/fa95c0c1fdab\n（1）先在个人的github账号中创建github.io仓库\n（2）将当前博客内容编译为html，放到public文件夹\n1 2 3 4 5 6 7 8 9 10 11 #首先需要记得修改 config.yaml文件的 baseURL参数设置为你想要绑定的域名 ## baseURL: https://www.username.github.io ##然后使用hugo编译 hugo # hugo -F --cleanDestinationDir # 加了上述参数表示表示每次生成的public都是全新的，会覆盖原来的。 ls ./public # 404.html assets/ categories/ index.html index.xml # page/ posts/ sitemap.xml tags/ （3）使用git将public文件夹的内容上传到github.io仓库\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 cd public/ #(1)第一次上传 git init git add . #添加当前路径的所有文件 git commit -m \u0026#39;create blog\u0026#39; git remote add origin https://github.com/username/username.github.io.git #根据gitbash提示操作 git push -u origin master ##如果push失败，比如time out...可尝试下面的命令 git config --global http.sslVerify \u0026#34;false\u0026#34; git config --global --unset http.proxy git config --global --unset https.proxy #(2)之后再修改、更新博客 git add . git commit -m \u0026#39;add blogs\u0026#39; git push -u origin master （4）访问网站\nhttps://username.github.io/\nHugo 博客添加disqus评论系统 参考：https://gohugo.io/content-management/comments/#configure-disqus\n自定义域名 为什么要自定义域名 腾讯云托管平台给每个用户提供一个免费的默认域名，比如\n1 https://hugo-2g64t7rc4f3f7b5b-1313255125.tcloudbaseapp.com/ 或者使用 github 托管代码给我们提供一个域名 https://username.github.io/\n但这些默认域名要么太难记要么太low了，我们需要一个特殊的域名，比如www.chenyd.com，因此需要自定义域名。\n创建自定义域名 参考：https://cloud.tencent.com/document/product/876/41139\n创建自定义域名\n域名注册\n域名解析\n域名备案 查询域名是否已备案：https://beian.miit.gov.cn/#/Integrated/index\n国内域名需要备案、香港及国外域名不需要备案。\n搭建过程中遇到的问题 Q：应用主题报错\nA：https://cloud.tencent.com/developer/ask/sof/1120405\nQ：\nA：https://segmentfault.com/a/1190000040475072\n","date":"2022-08-24T00:00:00Z","permalink":"https://chenyidao.github.io/p/hugo--github--action-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","title":"hugo + github + action 搭建个人博客"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nbilibilibi Shortcode Gist Shortcode Gitlab Snippets Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2022-08-24T00:00:00Z","permalink":"https://chenyidao.github.io/p/%E5%AF%8C%E6%96%87%E6%9C%AC/","title":"富文本"},{"content":"markdown语法 stack主题官方提供的使用文档：https://docs.stack.jimmycai.com/zh/\n图片 1 2 3 4 5 可以通过在图片尾部添加宽度和高度控制图片大小，用法如下： ![同时设置宽度和高度](https://files.mdnice.com/logo.png =150x150) ![只设置宽度，推荐使用百分比](https://files.mdnice.com/logo.png =40%x) Front Matter中引用图片？为何不生效？ 引用方式\n使用属性image引用\n使其生效\n需要将md文件命名为index.md；需要使用.jpg格式图片\n正文中引用图片 相册语法来自： Typlog\n1 ![图片名称](图片地址) 字体 这个是粗体\n这个是斜体\n这个是粗体加斜体\n高亮文字\n链接 你是《未来世界的幸存者》么？\n超链接到图像\n引用 引用的格式是在符号 \u0026gt; 后面书写文字，文字的内容可以包含标题、链接、图片、粗体和斜体等。\n当使用多个 \u0026gt; 符号时，就会变成多级引用\n一级引用示例 二级引用示例 删除线 这是要被删除的内容。\n注释 1 \u0026lt;!--注释内容--\u0026gt; markdown中内嵌html/css语法 橙色居右 橙色居中\n特殊用法 下标和幂表示 H2O，Xn + Yn = Zn\n1 2 3 4 # 下标 H\u0026lt;sub\u0026gt;2\u0026lt;/sub\u0026gt;O # 幂 X\u0026lt;sup\u0026gt;n\u0026lt;/sup\u0026gt; + Y\u0026lt;sup\u0026gt;n\u0026lt;/sup\u0026gt; = Z\u0026lt;sup\u0026gt;n\u0026lt;/sup\u0026gt; 快捷键表示 CTRL+ALT+Delete\n1 \u0026lt;kbd\u0026gt;\u0026lt;kbd\u0026gt;CTRL\u0026lt;/kbd\u0026gt;+\u0026lt;kbd\u0026gt;ALT\u0026lt;/kbd\u0026gt;+\u0026lt;kbd\u0026gt;Delete\u0026lt;/kbd\u0026gt;\u0026lt;/kbd\u0026gt; 数学公式 markdown中插入视频等富文本 FAQ Q：\nGEThttp://localhost:1313/git.jpg 404\nA：排查发现，原来在编辑reading.md文档时是直接复制git的md过去的，front的image配置没改过来。\nQ：hugo 配置 favicon.ico\nGET http://localhost:1313/favicon.ico，404\nA：\nQ：配置页面显示最多归档数目(archives)、分类数目(categories)、标签数(tag-cloud)\nA：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 widgets: homepage: - type: search - type: archives params: limit: 5 - type: categories params: limit: 10 - type: tag-cloud params: limit: 10 page: - type: toc Q：不同的标签，却跳到同一个内容页面？\nA：有一个页面属于两个标签的内容\nQ：如何配置可以切换不同种语言页面？比如中文和英文？\nA：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 languages: # 英文版：markdown文件直接命名为index.md即可 #en: # languageName: English # title: heshan-leigongma # subtitle: myleigongma # weight: 2 # 中文版：命名为 index.zh-cn.md即可 zh-cn: languageName: 中文 title: 合山雷公马 subtitle: 骑上我的雷公马，砍柴学习两不误. weight: 1 ","date":"2022-08-22T00:00:00Z","permalink":"https://chenyidao.github.io/p/hugo-themes-stack-%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BD%BF%E7%94%A8/","title":"hugo-themes-stack 主题的使用"},{"content":"","date":"2022-08-21T00:00:00Z","permalink":"https://chenyidao.github.io/p/%E7%BA%AA%E5%BD%95%E7%89%87%E8%A7%82%E5%90%8E%E6%84%9F/","title":"纪录片观后感"},{"content":"","date":"2022-08-21T00:00:00Z","permalink":"https://chenyidao.github.io/p/%E7%BA%AA%E5%BD%95%E7%89%87%E8%A7%82%E5%90%8E%E6%84%9F/","title":"纪录片观后感"},{"content":"记录片 文物人文篇 1、《但是还有书籍》 9.4分\n2、《如果国宝会说话》9.4分\n3、《我在故宫修文物》9.4分\n4、《故宫100》9.4分\n5、《故宫的至宝》9.3分\n6、《典籍里的中国》8.7分\n7、《我在故宫六百年》8.8分\n8、《故宫新事》8.8分\n9、《学习的人》8.4分\n10、《盛会》\n人生百态篇 搞钱篇 电影 电视剧 动漫 ","date":"2022-08-21T00:00:00Z","permalink":"https://chenyidao.github.io/p/%E5%BD%B1%E8%A7%86/","title":"影视"},{"content":"auto\nc++ 11支持，自动类型推断\n1 auto i = 10 // 等价于scala中 val i = 10 static_cast\n强制隐式转换\nstd:setw(n)\n设置输出宽度为n，默认为右对齐并用空格补充\n1 2 count \u0026lt;\u0026lt; \u0026#34;0\u0026#34; \u0026lt;\u0026lt; std:setw(5) \u0026lt;\u0026lt; \u0026#34;1\u0026#34; \u0026lt;\u0026lt; endl; //输出：0 1 nullptr\nc++11支持，初始化空指针\nstd::move\nc++11支持，优点：提高性能\nstd::move 是将对象的状态或者所有权从一个对象转移到另一个对象，只是转移，没有内存的搬迁或者内存拷贝。\n如 string 类在赋值或者拷贝构造函数中会声明 char* 数组来存放数据，然后原 string 中的 char* 数组被析构函数释放，如果 s 是一个临时变量，则上面的拷贝和析构就是多余的，完全可以把临时变量 s 中的数据直接 “转移” 到新的变量下面。\nstr 对象的构造函数在 C++11 之前调用的是传统的 Copy Ctor，而在 C++11 中会优先调用 Move Ctor。\nmove 是和 copy 相对的：\ncopy 就是照着别人的东西复制一份，所需的工作量随拷贝对象的不同而不同，比如拷贝一个字很快，拷贝一本书很慢。 move 就是把别人书上的名字擦掉，写上自己的。因为 move 不需要复制，所以很快。其实就是把自己的指针指过去，把原属主的指针指向别处。 std::make_shared\nc++11支持，优点：提高性能\n头文件和源文件\nhttps://www.runoob.com/w3cnote/cpp-header.html\n简单来说就是，c++是编译型语言，在使用某个函数前，必须将它声明在当前使用位置的前面，不然编译不通过。\n为了简洁性和复用性，.h头文件中声明了.cpp文件中所有的方法，.cpp中对具体方法做定义和实现；\n其他文件要用.cpp中方法时，为了保证通过编译，先引入.h（函数声明），在调用的时候再链接到定义的地方调用即可。\n头文件本省不参与编译，但被其他.cpp文件引用时在多个.cpp文件中得到编译\n#include\n作用是将其后面所写的那个文件的内容，完完整整地、一字不改地包含到当前的文件夹中。\nextern\n修饰符extern用在变量或者函数的声明前，用来说明“此变量/函数是在别处定义的，要在此处引用”。\nhttps://zhuanlan.zhihu.com/p/267130913\n#ifdef\n条件编译。有时，希望当满足某条件时对一组语句进行编译，而当条件不满足时则编译另一组语句。在头文件中使用#ifdef和＃ifndef是非常重要的，可以防止双重定义的错误\n#define\n宏定义，C语言中，可以用 #define 定义一个标识符来表示一个常量。其特点是：定义的标识符不占内存，只是一个临时的符号，预编译后这个符号就不存在了。\n1 2 3 #define M 5 //无参宏 #define COUNT(M) M * M //有参宏 printf(\u0026#34;COUNT = %d\\n\u0026#34;, COUNT(10)); // 替换为： COUNT(10) = 10 * 10，输出结果： COUNT = 100 #\n凡是以“#”开头的均为预处理指令。\noperator\n运算符重载\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include \u0026lt;iostream\u0026gt; using namespace std; class person { private: int age; public: person(int nAge) { this-\u0026gt;age = nAge; } bool operator==(const person\u0026amp; ps) { if (this-\u0026gt;age == ps.age) { return true; } return false; } }; int main() { person p1(10); person p2(10); if (p1 == p2) // 这里可以直接 == 调用重载方法 { cout \u0026lt;\u0026lt; \u0026#34;p1 is equal with p2.\u0026#34; \u0026lt;\u0026lt; endl; } else { cout \u0026lt;\u0026lt; \u0026#34;p1 is not equal with p2.\u0026#34; \u0026lt;\u0026lt; endl; } return 0; } std::string\nhttps://blog.csdn.net/zy2317878/article/details/79056289\n1 2 3 4 5 6 7 8 std::string s1; //构造一个默认为空的string std::string s2 (s0); //通过复制一个string构造一个新的string std::string s3 (s0, 8, 3); //通过复制一个string的一部分来构造一个新的string。8为起始位置，3为偏移量。 std::string s4 (\u0026#34;A character sequence\u0026#34;); //与s0构造方式相同。 std::string s5 (\u0026#34;Another character sequence\u0026#34;, 12); //已知字符串，通过截取指定长度12来创建一个string std::string s6a (10, \u0026#39;x\u0026#39;); //指定string长度，与一个元素，则默认重复该元素创建string std::string s6b (10, 42); // 42 is the ASCII code for \u0026#39;*\u0026#39; //通过ASCII码来代替s6a中的指定元素。 std::string s7 (s0.begin(), s0.begin()+7); //通过迭代器来指定复制s0的一部分，来创建s7 ","date":"2022-08-18T00:00:00Z","permalink":"https://chenyidao.github.io/p/c-c-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","title":"【C++】C++ 学习笔记"},{"content":"git概述 git 常用操作 git 配置 安装git 1 2 # 查看是否安装成功 git --version 查看当前配置信息 1 git config --global --list 配置git 设置用户名和邮箱\n1 2 git config --global use.name \u0026#34;name\u0026#34; git config --global user.email \u0026#34;email@domain.com 生成秘钥并将秘钥复制到github上\n1 2 3 4 5 6 7 8 # 生成秘钥，系统会提示key的保存位置（一般是~/.ssh目录下）和指定口令，如果不需要则保持默认，连续三次回车即可 ssh-keygen # 获取生成的秘钥信息 cat ~/.ssh id_rsa.pub # 将秘钥复制到github # 获取到秘钥信息后将内容粘贴到github账号管理的添加SSH KEY界面中即可 版本信息 ^方式表示\n1 2 3 4 5 6 7 HEAD 表示当前commit HEAD^ 上一个版本commit HEAD^^ 上上个版本commit 以此类推 ~数字方式表示\n1 2 3 HEAD~0 当前版本 HEAD~1 上一个版本 回退 回退未使用git add 缓存的代码 1 2 3 4 5 # 放弃某文件的修改 git checkout filename # 放弃所有文件的修改 git checkout . 说明：\n此命令用来放弃掉所有还没有加入到缓冲区（就是git add 命令）的修改：内容修改与整个文件删除。 此命令不会删除新建的文件，因为新建的文件还没加入git管理系统中，所以对git来说是未知，只需手动删除即可。 回退已使用 git add缓存，但未使用git commit 提交的代码 1 2 3 4 5 6 7 8 9 10 # 放弃某文件 git reset HAED filename # 放弃所有文件 git reset HEAD # 放弃所有，保存工作目录，并清空暂存区 git reset HEAD~1 # 保留工作目录，并把重置HEAD所带来的新的差异放进暂存区，相当于回退到了 git add 的状态 git reset --soft HEAD~1 说明：\nreset 不加参数（mixed）：保留工作目录，并清空暂存区 reset \u0026ndash;soft 回退到 add 状态 回退已经git commit提交之后的代码 1 2 3 4 5 6 7 # 回退到上一次commit的状态 git reset --hard HEAD^ 或者 git reset --HARD HEAD~1 # 回退到某个commit git reset --hard HEAD^ #上个版本 git reset --hard HEAD~3 #回退到前3次commit之前 git reset --hard commit_id #回退/进到 指定commit的位置 分支操作 1 2 3 4 5 # 切换分支 git checkout 分支名 # 删除本地分支 git branch -D 分支名称 分支重命名\n1 2 3 4 5 6 7 8 # 分支重命名 git branch -m 旧分支名 新分支名 # 删除远程旧分支 git push --delete origin 分支名 # 将新分支推到远程 git push origin 新分支名 # 将当前分支跟踪到远程分支 git branch --set-upstream-to origin/远程分支 修改 commit 修改message 修改当前commit的message\n1 2 3 4 5 # 修改当前commit的message git commit --amend # 修改内容 # push到远端 git push -f 修改历史message\n1 2 3 4 5 6 7 8 9 10 11 # 比如修改当前2个commit，HEAD~2，将要修改的那一行的pick改为edit git rebase -i HEAD~2 # 修改commit内容 git commit --amend # 保存commit 内容 git rebase --continue # 强推到远端 git push -f Fork到别人的仓库后怎么更新 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 1、添加fork源仓库地址（upstream名称可自定义） git remote add upstreame 远程仓库地址 # 2、查看是否添加成功（此时本地仓应该对应了两个远程仓，一个是自己fork出来的origin，一个是刚刚add的upsteam源） git remote -v # 3、拉取远程源仓库 git fetch upstream # 4、切换到本地master分支 git checkout master # 5、将远程源master分支的变化合并到本地master分支 git merge upstream/master # 6、将本地更改提交到fork出来的仓库 git push origin master 不小心在master分支修改了代码并push到远端之后如何进行恢复 1 2 3 4 5 6 # 1、回退本地master分支代码 git log # 查看commit git reset --hard commit_id # commit_id选取master分支没乱之前的commit # 2、强制回退 git push -f origin master 说明：\n在强制回退过程中，可能master分支处于被保护状态，需要先设置未unprotected状态，再进行操作 开发时提交了多次，产生多个commit信息，但在合入到主干分支时想只显示一个commit，如何合并个人分支的多个commit信息？ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 1、rebase前n个要合并的commit git rebase -i HEAD~n # 2、将需要合并的commit由pick状态改成fixup(合并且不保留当前commit信息)或squash(合并且保留当前commit信息)状态 # 3、查看是否生效 git log # 4、（可选）如果合并有冲突，则需要解决冲突，并continue git rebase --continue # 5、（可选）如果过程中不想合并了，则abort git rebase --abort # 6、将合并后内容强制推到远程仓库 git push -f 说明：\ngit rebase -i HEAD~n之后\n当前分支有修改，主干分支有更新，我想合并主干的更新并将当前修改作为最新的commit怎么办？ merge 命令是否可行？ 如果进行merge 操作，会将主干分支更新的commit作为当前分支的最新commit进行合并，不可行。\nrebase 命令是否可行？ rebase 命令非常强大，可以当前诉求。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # 1、本地分支 add和 commit当前修改 git add . git commit -m \u0026#34;current commit\u0026#34; # 2、拉取主干 git fetch origin # 3、rebase主干 git rebase origin/master # 4、手动解决冲突 # 5、保存结果 git rebase --continue # 6、查看当前commit信息是否正确 git log # 7、将结果推到远端 git push -f 每一个项目都clone一次，形成一个文件夹进行维护太麻烦了，能不能只用一个项目文件夹来提交查看多个项目不同分支的代码？ ​\t一般来说，我们一个团队的开发流程是，建立一个基准仓，然后每个开发人员fork这个基准仓到个人仓，然后在个人仓上进行代码开发，然后再以 pull request的方式将修改合并到基准仓。\n​\t在这个过程中，不同开发人员之间可能需要相互检视他人的代码，要访问某个仓库分支，必须先获取到仓库地址，这个时候可以将其他开发的仓库add为个人本地仓库的远程仓之一。\n​\t一般同fork源的才建议这样处理。\n1 2 3 4 5 6 7 8 9 # 1、将其他开发人员个人仓作为远程仓方式添加到同一项目下 # git remote add 仓库名称（可自定义） 仓库地址 git remote add devA ssh:xxx.git # 2、拉取仓库内容（包括分支信息等） git fetch devA # 3、切换到对应分支 git checkout devA/branchA 如何统计当前账号代码提交量 1 git log --since=\u0026#39;2022-01-01\u0026#39; --unti=\u0026#39;2022-03-30\u0026#39; --author=\u0026#34;liudehua\u0026#34; --pretty=tformat:--numstat | awk \u0026#39;{add += $1;subs += $2} END {prinf \u0026#34;added lines:%s,removed lines:%s\\n\u0026#34;,add,subs}\u0026#39; Git解决冲突 利用IDEA进行冲突解决 1 2 3 4 5 6 # 拉取代码，可能存在冲突 git pull # IDEA 打开项目，右键项目选择Git，解决冲突 # 提交修改 git commit -m \u0026#34;solve conflit\u0026#34; git push ","date":"2022-08-17T00:00:00Z","permalink":"https://chenyidao.github.io/p/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/","title":"【Git】常用操作"},{"content":"FQA Q：如何在启动时指定对应的JDK版本及路径？（比如linux环境下IDEA）\nA：\n安装目录下，vim idea_x.x.x/bin/idea.sh，在脚本开头位置插入以下内容\n1 export JAVA_HOME=/home/jdk-1.8 ","date":"2022-08-17T00:00:00Z","permalink":"https://chenyidao.github.io/p/jetbrainsjetbrains%E7%B3%BB%E5%88%97%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/","title":"【Jetbrains】Jetbrains系列开发工具"},{"content":"常用开发工具 网站类 1、codeIf\n命名网站\n2、 tool.lu/\n在线格式化各种语言代码工具\n3、 java 教程网站\n4、 印记中文\n前端各种中文文档\n5、 新手入门编程教学网站 菜鸟教程 w3school\n6、 菜鸟工具\n各种编程工具（正则表达式测试、Json在线解析、代码转换等等）\n7、 开发者搜索\n过滤掉一些广告\n8、 Hellogithub\n有趣开源项目\n博客类 1、csdn 博客\n2、掘金 专注于开发的博客网站\n3、博客园 经典的程序员博客网站\n4、infoQ 前沿技术的探讨\n画图工具 EdrawMax 流程图、思维导图、UML类图、时序图等，比较全面 下载地址\nMindMaster 思维导图 下载地址\n在线思维导图\n知犀\n软件类 浏览器 谷歌、火狐 =========== 插件安装方便\n写代码工具 大项目开发（重量级）：IDE 系列（IDEA、Clion） 小项目开发、代码片段（轻量级）：vs code、sublime Text\n小程序 微信开发者工具\n美化终端 window：windows terminal linux： xshell、xftp\n资源管理 可视化数据库管理系统：navicat、SQLyog\nJava 性能分析 Jprofier：jvm性能分析\narthas：阿里巴巴jvm性能分析工具\n办公软件 滴答清单：记录每日待办事项，以及要完成的目标 腾讯会议 腾讯文档（和他人协作） Clover ：打开多个文件像浏览器一样窗口化 everyting：本地文件搜索神器\n文本编辑器：Notepad++\nTypora：markdown文档编辑器\n截图工具：Snipaste\n录屏软件：FastStone Capture 录屏录像\n​\t创作软件\n美图秀秀 修图 剪印 剪辑视频 懒人 Excel 第一ppt 爱给网 Pexels\n免费图库网站：\n百度\n好看CSS背景颜色：https://pxlab.cn/color/index.html\n学习资源类 Spring相关中文文档 尚硅谷 Spark 教程\n","date":"2022-08-17T00:00:00Z","permalink":"https://chenyidao.github.io/p/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/","title":"【开发工具】常用开发工具"},{"content":"ubuntu 图形化桌面搭建 搭建 参考：https://help.aliyun.com/document_detail/59330.html\nFQA Q：A VNC server is already running as :1\nA：https://blog.csdn.net/lxyoucan/article/details/119024402\nQ：装了ubuntu可视化界面，重启可视化界面之后访问不了外网了\nA：\n原因分析\nUbuntu环境安装桌面环境，安装过程中会覆盖dns解析的配置（即会清空/etc/resolv.conf），导致无法解析任何域名。\n另外重启等也可能会修改/etc/resolv.conf\n解决方法：重新配置代理\n1、先去ping 代理或者对应的IP，如果能ping通，则说明DNS域名解析有问题；如果代理IP都ping不通，那代理本身就有问题。\n2、如果是DNS域名有问题，排查文件 /etc/resolv.conf内容是否正确 查看发现里面内容已被覆盖清空，需要重新配置（网上搜一下配置内容）\n3、配置代理\n1 2 3 4 export http_proxy=\u0026#39;http://proxy.xxx.com:8080\u0026#39; export https_proxy=\u0026#39;http://proxy.xxx.com:8080\u0026#39; export ftp_proxy=\u0026#39;hhttp://proxy.xxx.com:8080\u0026#39; export no_proxy=\u0026#39;localhost,127.0.0.1\u0026#39; Q：密码忘记了，如何重置\nA：\n1 vncpassword Q：vnc客户端，偶尔出现死机的情况，重启命令\nA：\n1 2 3 4 5 # 停止服务 vncserver -kill:1 # 启动一个新的VNC并指定分辨率 vncserver -geometry 1920x1080:1 Q：VNCViewer 与 Windows端文本复制粘贴\nA：\n环境信息\n1 2 3 主机系统：Win10 VNCViewer端：Ubuntu 解决方法\n1、ubuntu下载工具 autocutsel\n1 sudo apt install autocutsel 2、运行（-f 在后台运行）\n1 autocutsel -f OpenEuler 安装远程桌面登录 VNC和GNOME的安装 参考：https://blog.csdn.net/huangsxint/article/details/115025519\nvnc：root/Huawei@123\n","date":"2022-08-17T00:00:00Z","permalink":"https://chenyidao.github.io/p/linux-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/","title":"linux 常用操作"},{"content":"linux 动态库搜索方式 软连接 1 2 # 在/opt/lib/下建立一个软连接 ss.so 引向 /usr/local/lib/ss.so ln -s /usr/local/lib/ss.so /opt/lib/ss.so ccache安装 为了加快 c++ 代码编译\n参考：https://blog.csdn.net/w13635739860/article/details/99288899\nlinux 软件安装方式 在线安装，比如apt install，yum install等方式 离线安装，下载二进制软件包，一般是压缩包，解压安装 ","date":"2022-08-17T00:00:00Z","permalink":"https://chenyidao.github.io/p/linux-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/","title":"linux 常用操作"},{"content":"代码调试概述 前言 ​\t有时候我们写出来的代码与预期处理结果不符，或者可能潜在一些bug，需要我们去修复；那么如何复现并快速定位到问题成为了关键，由于篇幅有限，本篇主要讨论问题复现（即debug），问题定位下一次再相互学习和讨论。\n​\t一般而言，我们开发流程是，在本地Window系统上开发完代码，然后将代码放在linux机器上跑。假如这时候我们要通过一个UT在本地调测一下我们写的函数表现是否符合预期。这个时候远程调试就发挥作用了。\n本篇文章涉及范围 远程调试 ​\tJava代码调试\n​\tScala代码调试\n​\tc++代码调试\nJava代码远程调试 IDEA 调试Java UT 调试某个用例（比如 xxxTest.java测试类） 引用插件\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-surefire-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.19.1\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;!--\u0026gt;这里面有很多配置，自行上网查询\u0026lt;--\u0026gt; \u0026lt;!--\u0026gt;包含测试用例includes\u0026lt;--\u0026gt; \u0026lt;!--\u0026gt;排除测试用例excludes\u0026lt;--\u0026gt; \u0026lt;!--\u0026gt;生成测试报告等\u0026lt;--\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; 动态指定测试用例\n1 2 3 4 5 # 只跑xxxTest.java这个类的用例 mvn test -Dtest=xxxTest.java # 只跑xxxTest.java这个类中的myTest用例方法 mvn test -Dtest=xxxTest.java#myTest 远程调试某个用例 参考：https://www.jianshu.com/p/302dc10217c0\n1、IDEA 设置（借用别人一个图）\n​\t2、linux 服务器上执行调试命令\n1 2 # 跑xxxTest.java这个类的用例 mvn -Dmaven.surefire.debug=\u0026#34;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8088 -Xnoagent -Djava.compiler=NONE\u0026#34; test -Dtest=xxxTest.java 3、在本地IDEA上打好断点，点击调试按钮，然后就可以进行调试啦~\n注意点：\nIDEA选择要调试的模块代码要与远程服务器上的代码一致 IDEA上填的端口号要与远程调试命令中的一致 IDEA 调试scala UT 参考地址：https://www.cnblogs.com/doit8791/p/5766239.html\n1、IDEA设置远程调试\n方式一：插件参数方式设置\n\u0026lt;debugForkedProcess\u0026gt;true\u0026lt;/debugForkedProcess\u0026gt;\n1 2 3 4 5 6 7 8 \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.scalatest\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;scalatest-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;testFailureIgnore\u0026gt;true\u0026lt;/testFailureIgnore\u0026gt; \u0026lt;debugForkedProcess\u0026gt;true\u0026lt;/debugForkedProcess\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; 2、执行mvn test 命令\nIDEA 中在要调测的用例上打好断点，服务器上执行 mvn test 命令。\n远程通过JAVA或者Scala调用到 C++代码 1、IDEA 上远程调试挂上java 或 scala，走到调用C++代码之前的断点处\n2、Clion 打开C++项目，Run -\u0026gt; Attach to Process，挂上正在运行的java或scala进程\n可通过 jps查看（都是java进程），scala ut 显示进程名称是 ScalaTestRunner\n3、IDEA 上往下走\n4、走到C++侧时，点击Clion的左下角 Debugger -\u0026gt; GDB，然后在其中输入命令，然后按F9\n1 handle SIGSEGV noprint pass 5、在C++侧要调测的代码位置打好断点，放开IDEA 侧断点，按F9，即可走到C++断点处。\n注意：\n在过程中如果有多个线程，可以在运行到某个线程时，在Debugger -\u0026gt; GDB中输入 set scheduler-locking on 锁住该线程，然后调试该线程的执行过程。 ","date":"2022-08-17T00:00:00Z","permalink":"https://chenyidao.github.io/p/%E8%B0%83%E8%AF%95/","title":"调试"},{"content":"","date":"2022-08-17T00:00:00Z","permalink":"https://chenyidao.github.io/p/reading/","title":"读书笔记"},{"content":"软件技术类 基础 进阶 应用 计算机科学类 基础 进阶 应用 ","date":"2022-08-17T00:00:00Z","permalink":"https://chenyidao.github.io/p/%E6%8A%80%E6%9C%AF%E7%B1%BB/","title":"技术类"},{"content":"基础 进阶 应用 ","date":"2022-08-17T00:00:00Z","permalink":"https://chenyidao.github.io/p/%E7%BB%8F%E6%B5%8E%E7%B1%BB/","title":"经济类"},{"content":"国内简史 国外史 ","date":"2022-08-17T00:00:00Z","permalink":"https://chenyidao.github.io/p/%E5%8E%86%E5%8F%B2%E7%B1%BB/","title":"历史类"},{"content":"","date":"2022-08-17T00:00:00Z","permalink":"https://chenyidao.github.io/p/%E4%BA%BA%E7%89%A9%E4%BC%A0%E8%AE%B0%E7%B1%BB/","title":"人物传记类"},{"content":"各种软件激活 typora 2022-08-17 日激活\n参考激活方式：https://www.cnblogs.com/hackettt/p/16335288.html\n下载 typora官方中文站：https://typoraio.cn/ （ps：高版本的可能会出现Error问题，网盘资源中的typora版本亲测没问题）\n百度云网盘资源：\n链接：https://pan.baidu.com/s/1QDXiR3kAn4ZgnT9nhM2qiA\n提取码：w7ww\n资源中有3个文件\n当前已经保存到我的百度网盘，/typora激活目录下\n破解 替换app.asar文件\ntypora安装后，将百度云盘下载的app.asar.txt 文件中的后缀.txt去掉，并拷贝到typora安装路径下替换\n我的路径是：D:\\Typora\\resources 根据自己的安装路径进行替换\n​\t提示 若文件名中未展示扩展名（.txt），请打开计算机，查看，勾选文件扩展名，使文件显示扩展名\n​\t输入序列号激活 打开 typora ，点击“输入序列号”：\n邮箱一栏中任意填写（但须保证邮箱地址格式正确），输入序列号(在key.txt文件中，任选一条)，点击“激活”。\n出现已激活即可\n​\tIDEA 激活 2022-06-06日激活\n参考：https://www.cnblogs.com/fanbi/p/16227293.html\n","date":"2022-08-17T00:00:00Z","permalink":"https://chenyidao.github.io/p/%E8%BD%AF%E4%BB%B6%E6%BF%80%E6%B4%BB/","title":"软件激活"},{"content":"软件技术类 基础 进阶 应用 ","date":"2022-08-17T00:00:00Z","permalink":"https://chenyidao.github.io/p/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF%E7%B1%BB/","title":"软件技术类"},{"content":"双指针算法 基本介绍（是什么） ​\t双指针，指在遍历对象过程中，不是普通的使用单个指针进行访问，而是使用两个相同方向（快慢指针）或相反方向（对撞指针）的指针进行扫描，从而获取答案的算法。\n​\t换言之，双指针法充分利用了数组有序这一特征，从而在某些情况下能够简化一些运算。\n用法 对撞指针 说明 对撞指针是指在有序数组中，将指向最左侧的索引定义为左指针（left），指向最右侧的索引定义为右指针（right），然后从两头向中间进行遍历。\n例题 11. 盛最多水的容器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { // 左右指针 public int maxArea(int[] height) { // 初始：左指针指向最左，右指针指向最右 int left = 0; int right = height.length - 1; int max = Integer.MIN_VALUE; while (left \u0026lt; right) { int leftValue = height[left]; int rightValue = height[right]; int min = Math.min(leftValue, rightValue); // 更新答案 max = Math.max(min * (right - left), max); // 左指针值大于右指针，则右指针左移，一直移动到大于当前位置，然后计算当前容量并更新答案 if (height[left] \u0026gt; height[right]) { right--; while (left \u0026lt; right \u0026amp;\u0026amp; height[right] \u0026lt; rightValue) { right--; } } else { left++; // 左指针值小于等于右指针，则左指针右移，一直移动到大于当前位置，然后计算当前容量并更新答案 while (left \u0026lt; right \u0026amp;\u0026amp; height[left] \u0026lt;= leftValue) { left++; } } } return max; } } 15. 三数之和 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 class Solution { /* * 控制变量法 * 1、排序 * 2、固定一个，左右指针移动两个 */ public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; threeSum(int[] nums) { // 排序 Arrays.sort(nums); List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; nums.length; i++) { // 去重 if (i \u0026gt; 0 \u0026amp;\u0026amp; nums[i] == nums[i - 1]) { continue; } int left = i + 1; int right = nums.length - 1; while (left \u0026lt; right) { // 如果最小的大于0，则和肯定大于0 if (nums[i] \u0026gt; 0) { break; } int sum = nums[left] + nums[right] + nums[i]; if (sum == 0) { res.add(Arrays.asList(nums[i], nums[left], nums[right])); // 去重 -2,-1,-1,0,0,1,1,2,2 while (left \u0026lt; right \u0026amp;\u0026amp; nums[left] == nums[left + 1]) { left++; } while (left \u0026lt; right \u0026amp;\u0026amp; nums[right] == nums[right - 1]) { right--; } left++; right--; } while (left \u0026lt; right \u0026amp;\u0026amp; nums[left] + nums[right] + nums[i] \u0026lt; 0) { left++; } while (left \u0026lt; right \u0026amp;\u0026amp; nums[left] + nums[right] + nums[i] \u0026gt; 0) { right--; } } } return res; } } 快慢指针 说明 快慢指针指两个指针从同一侧开始遍历数组，将这两个指针分别定义为快指针（fast）和慢指针（slow），两个指针以不同的策略移动，直到两个指针的值相等（或其他特殊情况）为止。比如fast每次增长2个，slow每次增长1个。\n例题 26. 删除有序数组中的重复项 题意理解：\n升序排列的数组\n对于有序一定要警觉，对有序而言，二叉查找和双指针一定要本能就想到的。\n原地删除重复元素，使得每个元素只出现一次\n不能申请其他内存空间，意味着需要使用高效的算法\n将最终结果插入num的前k个位置后返回k，且元素的相对顺序要保持一致\n相当于把删除操作后剩余的元素全部前移到原数组的最前面\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public int removeDuplicates(int[] nums) { // 快慢指针 int left = 1; int right = 1; int len = nums.length; while (right \u0026lt; len) { // 如果遇到重复元素，左指针指向重复位置，右指针继续往前走 // 不重复之后右指针指向的值存到左指针位置 if (nums[right] != nums[right - 1]) { nums[left++] = nums[right]; } right++; } // left指向的就是最后第k个位置 return left; } } 324. 摆动排序 II 题目描述\n给你一个整数数组nums，将它重新排列成nums[0] \u0026lt; nums[1] \u0026gt; nums[2] \u0026lt; nums[3] \u0026hellip; 的顺序\n解题思路\n容易想到的是，将数组进行排序，然后从左到右填充目标数组，填充方式为先将最左边数值加入目标数组，再将最右边数值加入目标数组。\n但这样有个问题，比如112233 =\u0026gt; 目标数组为 131322，对于最末尾的22不满足要求，满足要求的目标数组为231312。\n可以选择排序后倒叙交叉插入的方式，即左指针指向中间，右指针指向末尾，然后进行填充目标数组。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public void wiggleSort(int[] nums) { // 排序 Arrays.sort(nums); int length = nums.length; int[] temp = Arrays.copyOf(nums, length); // 左右指针，将元素填入数组中 // 倒序交叉插入，防止112233 =\u0026gt; 131322 // 左指针指向中间 int left = length % 2 == 0 ? length / 2 - 1 : length / 2; // 右指针指向结尾 int right = length - 1; // 先放左边，然后放右边 for (int i = 0; i \u0026lt; length; i++) { // 奇数位置填right，偶数位置填left nums[i] = temp[(i \u0026amp; 1) == 0 ? left-- : right--]; } } } 141. 环形链表 判断链表中是否有环\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public boolean hasCycle(ListNode head) { if (head == null) { return false; } ListNode pre = head; ListNode next = head; while (next != null) { pre = pre.next; next = next.next; if (next != null) { next = next.next; } else { return false; } if (pre == next) { return true; } } return false; } } 总结 使用场景 对撞指针适用于有序数组 快慢指针适用于链表处理 多个数进行数学运算的组合问题 两数之和/差的组合数 三数之和的组合数 模板 快慢指针\n1 2 3 4 5 6 7 8 9 10 11 12 private int template(int[] arr, int diff) { // 排序 Arrays.sort(arr); int len = arr.length; int res = 0; int slow = 0; int fast = 1; while (slow \u0026lt; fast \u0026amp;\u0026amp; fast \u0026lt; len) { // ... } return res; } 对撞指针\n1 2 3 4 5 6 7 8 9 10 11 12 private int template(int[] arr, int diff) { // 排序 Arrays.sort(arr); int len = arr.length; int res = 0; int left = 0; int right = len - 1; while (left \u0026lt;= right) { // ... } return res; } 去重（以快慢指针为例）\n1 2 3 4 5 6 7 8 9 10 11 private int template(int[] arr, int diff) { // ... while (left \u0026lt;= right) { // 去重 if (left \u0026gt; 0 \u0026amp;\u0026amp; nums[left] == nums[left - 1]) { continue; } // ... } return res; } ","date":"2022-08-17T00:00:00Z","permalink":"https://chenyidao.github.io/p/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/","title":"双指针算法"},{"content":"","date":"2022-08-17T00:00:00Z","permalink":"https://chenyidao.github.io/p/%E5%93%B2%E5%AD%A6%E7%B1%BB/","title":"哲学类"}]